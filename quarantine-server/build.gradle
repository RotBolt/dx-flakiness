plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group 'com.vinaysshenoy'
version '0.0.1'
mainClassName = 'com.vinaysshenoy.quarantine.AppKt'

shadowJar {
    mergeServiceFiles()
    baseName = 'quarantine-server'
    classifier = ''
    archiveVersion = project.version
}

test {
    useJUnitPlatform()
    systemProperty "junit.jupiter.extensions.autodetection.enabled", true
}

sourceCompatibility = 1.8

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.30.1'

    implementation group: 'io.dropwizard', name: 'dropwizard-core', version: '2.0.0'
    implementation group: 'io.dropwizard', name: 'dropwizard-views-mustache', version: '2.0.0'
    implementation group: 'io.dropwizard', name: 'dropwizard-jdbi3', version: '2.0.0'
    implementation group: 'io.dropwizard', name: 'dropwizard-migrations', version: '2.0.0'
    implementation group: 'org.jdbi', 'name': 'jdbi3-kotlin-sqlobject', version: '3.11.1'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.10.1'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.0'

    testImplementation group: 'io.strikt', name: 'strikt-core', version: '0.23.4'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

task copyPackagedJar(type: Copy) {
    def env = rootProject.property('com.vinaysshenoy.quarantine.env')
    def builtJar = "quarantine-server-${project.version}.jar"
    def configFile = "config-${env}.yml"

    from("build/libs",) {
        include builtJar
    }
    from(projectDir.path) {
        include configFile
    }
    into rootProject.file('package')
    rename builtJar, "app.jar"
    rename configFile, "config.yml"
}
shadowJar.finalizedBy copyPackagedJar